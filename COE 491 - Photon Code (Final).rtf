{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // This #include statement was automatically added by the Particle IDE.\
#include <SparkFunLSM9DS1.h>\
#include <MQTT.h>\
\
#include "math.h"\
\
#define CLIENT_ID 1 //software defined client ID\
\
LSM9DS1 imu;\
\
#define LSM9DS1_M   0x1E // Would be 0x1C if SDO_M is LOW\
#define LSM9DS1_AG  0x6B // Would be 0x6A if SDO_AG is LOW\
\
//mp3\
# define Start_Byte 0x7E\
# define Version_Byte 0xFF\
# define Command_Length 0x06\
# define End_Byte 0xEF\
# define Acknowledge 0x00 //Returns info with command 0x41 [0x01: info, 0x00: no info]\
\
#define PRINT_CALCULATED\
//#define PRINT_RAW\
#define PRINT_SPEED 250 // 250 ms between prints\
\
#define DECLINATION -8.58 // Declination (degrees) in Boulder, CO.\
\
//******************************************tracks************************************************\
# define throw_me 1\
# define quick_find_a_larger_number 2\
# define quick_find_a_smaller_number 3\
# define quick_my_lights_are_going_out 4\
# define that_is_correct 5\
# define that_is_wrong 6\
# define you_got_the_number 7\
# define zero 8\
# define one 9\
# define two 10\
# define three 11\
# define four 12\
# define five 13\
# define six 14\
# define seven 15\
# define eight 16\
# define nine 17\
\
# define yzero 18\
# define yone 19\
# define ytwo 20\
# define ythree 21\
# define yfour 22\
# define yfive 23\
# define ysix 24\
# define yseven 25\
# define yeight 26\
# define ynine 27\
\
int trackNumber[10] = \{yzero, yone, ytwo, ythree, yfour, yfive, ysix, yseven, yeight, ynine\};\
\
//******************************************states************************************************\
# define idle 0\
# define start_sequence_oneplayer 1\
# define play_sound_throw_me 2\
# define face_number_calculating 3\
# define face_number_calculated 4\
# define play_sound_intructions 5\
# define play_sound_quick 6\
# define get_face_number 7\
# define check_if_correct 8\
# define play_sound_correct 9\
# define play_sound_wrong 10\
# define send_back_score 11\
\
int num1, num2;\
int faceNumberBuffer[15], i = 0;\
\
bool faceNumberCalculated = false; //boolean to store status whether to send score or not\
\
int state = idle;\
\
String sensor;\
\
//*******************************************pins*************************************************\
int vibrationPin = WKP;\
int ledPins[5] = \{D7, D6, D5, A1, A2\};\
\
\
//byte server[] = \{ 192,168,254,41 \}; //the IP of broker\
String server = "test.mosquitto.org";\
void callback(char* topic, byte* payload, unsigned int length);\
\
MQTT client("broker.hivemq.com", 1883, callback);\
 \
 void callback(char* topic, byte* payload, unsigned int length) \{\
    char p[length + 1];\
    memcpy(p, payload, length);\
    p[length] = NULL;\
    String message(p);\
     \
    if (message.equals("1testConnnected"))\
        client.publish("feedbackSLD", "good");\
    \
    else if (message.equals("1startSequenceOnePlayer"))\
        state = start_sequence_oneplayer;\
    \
    delay(1000);\
 \}\
\
void setup()\{\
\
  Serial.begin(115200);\
  Serial1.begin(9600);\
  \
  //pins\
    for (int j=0; j<5; j++) \
        pinMode(ledPins[j], OUTPUT); //leds\
   \
    pinMode(vibrationPin, OUTPUT); //vibration motor\
    \
  //mp3 player\
    execute_CMD(0x3F, 0, 0); // Send request for initialization parameters\
    //while (Serial1.available()<10) // Wait until initialization parameters are received (10 bytes)\
    delay(30);\
    \
    setVolume(29); // Set the volume (0x00~0x30)\
  \
  //imu\
    initializeIMU();\
  \
  //mqtt\
   client.connect(System.deviceID());\
     if (client.isConnected()) \{\
        client.subscribe("commandsSLD");\
        client.publish("testSLD", "connected");\
     \}\
\}\
\
void loop()\{\
    \
    imu.readAccel();\
    \
    if (client.isConnected())\
         client.loop();\
    \
    //client.publish("value", String(faceNumber));//publishing a sensor data  to the topic "value"\
          \
    switch (state)\{\
        \
        case start_sequence_oneplayer:\
            state = play_sound_throw_me;\
            break;\
        \
        case play_sound_throw_me:\
            playMP3(throw_me);  //play sound throw me\
             for (int j=0; j<5; j++) \
                digitalWrite(ledPins[j], TRUE);\
            state =  face_number_calculating;\
            analogWrite(vibrationPin, 200);\
            delay(2000);\
            break;\
        \
        case face_number_calculating:\
            analogWrite(vibrationPin, 0);\
            if (i % 5 == 0) \{\
                state = face_number_calculated;\
                for (int j = 0; j < i; j++) \{\
                    if (j != 0)\{\
                        if (faceNumberBuffer[0] != faceNumberBuffer[j])\{\
                            state = face_number_calculating;\
                        \}\
                    \}\
                \}   \
            \}\
            if (i == 15)\
                i = 0;\
            \
            faceNumberBuffer[i] = findNumber();\
            i += 1;\
            break;\
        \
        case face_number_calculated:\
            num1 = faceNumberBuffer[0];\
            client.publish("feedbackSLD", String(num1)); //publishing a face number to the topic "feedback"\
            state = play_sound_intructions;\
            break;\
            \
        case play_sound_intructions:\
            playMP3(trackNumber[num1]);\
            if (num1<9)\
                playMP3(quick_find_a_larger_number);  //play sound instructions (>9)\
            else\
                playMP3(quick_find_a_smaller_number); //play sound instructions (<9)\
            delay(1000);\
            state = play_sound_quick;\
            break;\
        \
        case play_sound_quick:\
            playMP3(quick_my_lights_are_going_out); //play sound quick\
            analogWrite(vibrationPin, 200);\
            delay(1000);\
            //start fading lights:\
            for (int j=0; j<5; j++) \
                digitalWrite(ledPins[j], FALSE);\
            state = get_face_number;\
            analogWrite(vibrationPin, 0);\
            i = 0;\
            break;\
        \
        case get_face_number:\
            if (i % 5 == 0) \{\
                state = check_if_correct;\
                for (int j = 0; j < i; j++) \{\
                    if (faceNumberBuffer[0] != faceNumberBuffer[j])\{\
                        state = get_face_number;\
                    \}\
                \} \
            \}\
            if (i == 15)\
            i = 0;\
            \
            faceNumberBuffer[i] = findNumber();\
            i += 1;\
            break;\
        \
        case check_if_correct:\
            i = 0;\
            num2 =  faceNumberBuffer[0];\
            if (num1 != 9)\{\
                if (num2 > num1)\
                    state = play_sound_correct;\
                else \
                    state = play_sound_wrong;\
            \}\
            else\
                 state = play_sound_correct;\
            break;\
                \
        case play_sound_correct:\
            playMP3(that_is_correct);  //play sound correct\
            client.publish("feedbackSLD", "Correct!");\
            for (int i = 0; i<5; i++)\{\
                  digitalWrite(ledPins[3], TRUE);\
                  delay(100);\
                  digitalWrite(ledPins[5], TRUE);\
                  delay(100);\
                  digitalWrite(ledPins[0], FALSE);\
                  delay(100);\
                  digitalWrite(ledPins[2], TRUE);\
                  delay(100);\
                  digitalWrite(ledPins[1], FALSE);\
                  delay(100);\
                  digitalWrite(ledPins[2], FALSE);\
                  delay(100);\
                  digitalWrite(ledPins[0], TRUE);\
                  delay(100);\
                  digitalWrite(ledPins[3], FALSE);\
                  delay(100);\
                  digitalWrite(ledPins[4], TRUE);\
                  delay(100);\
                  digitalWrite(ledPins[4], FALSE);\
                  delay(100);\
                  digitalWrite(ledPins[5], FALSE);\
                  delay(100);\
                  digitalWrite(ledPins[1], TRUE);\
                  delay(100);\
            \}\
            state = idle;\
            break;\
        \
        case play_sound_wrong:\
            playMP3(that_is_wrong);  //play sound wrong\
            client.publish("feedbackSLD", "Wrong!");\
            state = idle;\
            break;\
        \
        case idle:\
            for (int j=0; j<5; j++) \
                    digitalWrite(ledPins[j], FALSE);\
            client.publish("testSLD", "NO COMMAND RECEIVED YET");\
            break;\
            \
        default:\
            client.publish("testSLD", "ERROR/NO COMMAND RECEIVED YET");\
            break;\
        \
    \}\
    \
    client.publish("testSLD", String(state));\
    delay(1000);\
\}\
\
//****************************************find Number*********************************************\
\
int findNumber ()\{\
    \
     int faceNumberLocal;\
\
     int x = String(imu.ax).toInt()/100;\
     int y = String(imu.ay).toInt()/100;\
     int z = String(imu.az).toInt()/100;\
 \
     sensor = "x=" + String(x) + " y=" + String(y) + " z=" + String(z);\
     \
     if ((x>=100)&& (x<=200) && (y>=-100)&& (y<=-10) && (z>=-60)&& (z<=0))\{\
        faceNumberLocal=0;\
     \}\
     else if ((x>=-200)&& (x<=-110) && (y>=-70)&& (y<=-50) && (z>=-60)&& (z<=10))\{\
         faceNumberLocal=1;\
     \}\
     else if ((x>=80)&& (x<=100) && (y>=-120)&& (y<=-90) && (z>=60)&& (z<=100))\{\
         faceNumberLocal=2;\
     \}\
     else if ((x>=-100)&& (x<=-70) && (y>=70)&& (y<=140) && (z>=-100)&& (z<=-70))\{\
         faceNumberLocal=3;\
     \}\
     else if ((x>=-200)&& (x<=-120) && (y>=30)&& (y<=69) && (z>=-60)&& (z<=30))\{\
        faceNumberLocal=4;\
     \}\
     else if ((x>=0)&& (x<=120) && (y>=80)&& (y<=99) && (z>=80)&& (z<=110))\{\
        faceNumberLocal=5;\
     \}\
     else if ((x>=130)&& (x<=150) && (y>=50)&& (y<=90) && (z>=-20)&& (z<=120))\{\
        faceNumberLocal=6;\
     \}\
     else if ((x>=-60)&& (x<=-35) && (y>=0)&& (y<=20) && (z>=-180)&& (z<=-140))\{\
        faceNumberLocal=7;\
     \}\
      else if ((x>=30)&& (x<=50) && (y>=-40)&& (y<=30) && (z>=120)&& (z<=170))\{\
        faceNumberLocal=8;\
     \}\
      else if ((x>=-100)&& (x<=-80) && (y>=-120)&& (y<=-80) && (z>=-110)&& (z<=-80))\{\
        faceNumberLocal=9;\
     \}\
     else \
        faceNumberLocal = faceNumberBuffer[i];\
     \
     delay(100);\
     \
     return faceNumberLocal;\
    \
\}\
\
//****************************************mp3 player*******************************************\
\
\
void playMP3(byte track)\{\
    execute_CMD(0x12,0,track); \
    delay(2000);\
\}\
\
void playFirst()\{\
  setVolume(28);\
  delay(500);\
  //execute_CMD(0x11,0,1); \
  execute_CMD(0x12,0,1); \
  delay(500);\
\}\
\
void pause()\{\
  execute_CMD(0x0E,0,0);\
  delay(500);\
\}\
\
void play()\{\
  execute_CMD(0x0D,0,1); \
  delay(500);\
\}\
\
void playNext()\{\
  execute_CMD(0x01,0,1);\
  delay(500);\
\}\
\
void playPrevious()\{\
  execute_CMD(0x02,0,1);\
  delay(500);\
\}\
\
void setVolume(int volume)\{\
  execute_CMD(0x06, 0, volume); // Set the volume (0x00~0x30)\
  delay(2000);\
\}\
\
void execute_CMD(byte CMD, byte Par1, byte Par2) \{\
     // Calculate the checksum (2 bytes)\
     int16_t checksum = -(Version_Byte + Command_Length + CMD + Acknowledge + Par1 + Par2);\
    \
     // Build the command line\
     byte Command_line[10] = \{ Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, Par1, Par2, checksum >> 8, checksum & 0xFF, End_Byte\};\
    \
     //Send the command line to the module\
     for (byte k=0; k<10; k++)\
     \{\
      Serial1.write( Command_line[k]);\
     \}\
\}\
\
//*******************************************IMU************************************************\
\
void initializeIMU()\{\
  // Before initializing the IMU, there are a few settings\
  // we may need to adjust. Use the settings struct to set\
  // the device's communication mode and addresses:\
  imu.settings.device.commInterface = IMU_MODE_I2C;\
  imu.settings.device.mAddress = LSM9DS1_M;\
  imu.settings.device.agAddress = LSM9DS1_AG;\
  // The above lines will only take effect AFTER calling\
  // imu.begin(), which verifies communication with the IMU\
  // and turns it on.\
  \
  if (!imu.begin())\{\
    Serial.println("Failed to communicate with LSM9DS1.");\
    Serial.println("Double-check wiring.");\
    Serial.println("Default settings in this sketch will " \\\
                  "work for an out of the box LSM9DS1 " \\\
                  "Breakout, but may need to be modified " \\\
                  "if the board jumpers are.");\
    while (1)\
      ;\
  \}\
\}\
\
}